rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /artifacts/{appId} {
      match /public/data/users/{userId} {
        // Jeder darf Profile lesen
        allow read: if true;

        // Erstellen/Aktualisieren NUR vom Besitzer + strikte Feld-Whitelist
        allow create, update: if request.auth != null
          && request.auth.uid == userId
          && (request.resource.data is map)
          && request.resource.data.keys().hasOnly([
               // Basis-Profil
               'displayName','photoURL','about',
               // Ident/Meta
               'email','username','language','publicKey','lastLogin',
               // Timestamps
               'createdAt','updatedAt'
             ])
          // Typ-Checks
          && (!('displayName' in request.resource.data) || (request.resource.data.displayName is string))
          && (!('photoURL'    in request.resource.data) || (request.resource.data.photoURL is string))
          && (!('about'       in request.resource.data) || (request.resource.data.about is string))
          && (!('email'       in request.resource.data) || (request.resource.data.email is string))
          && (!('username'    in request.resource.data) || (request.resource.data.username is string))
          && (!('language'    in request.resource.data) || (request.resource.data.language is string))
          && (!('publicKey'   in request.resource.data) || (request.resource.data.publicKey is string))
          && (!('lastLogin'   in request.resource.data) || (request.resource.data.lastLogin is timestamp))
          && (!('createdAt'   in request.resource.data) || (request.resource.data.createdAt is timestamp))
          && (!('updatedAt'   in request.resource.data) || (request.resource.data.updatedAt is timestamp));

        // Löschen nur vom Besitzer
        allow delete: if request.auth != null && request.auth.uid == userId;
      }

      // Chats – Mitgliedschaft per members{uid:true} ODER participants[]
      match /public/data/chats/{chatId} {
        function isMember() {
          return request.auth != null && (
            (resource.data.members[request.auth.uid] == true) ||
            (resource.data.participants is list && resource.data.participants.hasAny([request.auth.uid]))
          );
        }

        allow read: if isMember();

        allow create: if request.auth != null
          && (
               (request.resource.data.members[request.auth.uid] == true) ||
               (request.resource.data.participants is list && request.resource.data.participants.hasAny([request.auth.uid]))
             )
          && request.resource.data.keys().hasOnly(['members','participants','owner','createdAt','updatedAt','title']);

        allow update: if isMember()
          && request.resource.data.keys().hasOnly(['members','participants','owner','createdAt','updatedAt','title'])
          && request.resource.data.createdAt == resource.data.createdAt;

        allow delete: if isMember() && request.auth.uid == resource.data.owner;
      }

      // Messages – nur Mitglieder; keine Edits
      match /public/data/chats/{chatId}/messages/{messageId} {
        function chatHasMember() {
          return request.auth != null && (
            get(/databases/(default)/documents/artifacts/secure-messenger-v2/public/data/chats/$(chatId)).data.members[request.auth.uid] == true
            || get(/databases/(default)/documents/artifacts/secure-messenger-v2/public/data/chats/$(chatId)).data.participants.hasAny([request.auth.uid])
          );
        }

        allow read: if chatHasMember();

        allow create: if chatHasMember()
          && request.resource.data.senderId == request.auth.uid
          && (request.resource.data is map)
          && request.resource.data.keys().hasOnly(['senderId','ciphertext','nonce','version','createdAt','timestamp','read','media'])
          && (request.resource.data.ciphertext is string && request.resource.data.ciphertext.size() <= 5000)
          && (request.resource.data.nonce is string && request.resource.data.nonce.size() > 0)
          && (request.resource.data.version is string && request.resource.data.version.size() > 0)
          && (!('media' in request.resource.data) || (
                request.resource.data.media is map
                && request.resource.data.media.keys().hasOnly(['path','size','contentType','width','height'])
                && (request.resource.data.media.path is string && request.resource.data.media.path.matches('^chatMedia/[^/]+/[^/]+/.+'))
                && (request.resource.data.media.size is int && request.resource.data.media.size <= 10 * 1024 * 1024)
                && (request.resource.data.media.contentType is string && request.resource.data.media.contentType.matches('^image/|^application/octet-stream$'))
             ));

        allow update: if false;

        allow delete: if chatHasMember()
          && (request.auth.uid == resource.data.senderId
              || request.auth.uid == get(/databases/(default)/documents/artifacts/secure-messenger-v2/public/data/chats/$(chatId)).data.owner);
      }

      // Typing-Status – pro Nutzer & Chat
      match /public/data/typing/{chatId}/users/{uid} {
        function chatHasMember() {
          return request.auth != null && (
            get(/databases/(default)/documents/artifacts/secure-messenger-v2/public/data/chats/$(chatId)).data.members[request.auth.uid] == true
            || get(/databases/(default)/documents/artifacts/secure-messenger-v2/public/data/chats/$(chatId)).data.participants.hasAny([request.auth.uid])
          );
        }

        allow read: if chatHasMember();
        allow create, update: if chatHasMember()
          && request.auth.uid == uid
          && (request.resource.data is map)
          && request.resource.data.keys().hasOnly(['isTyping','updatedAt'])
          && (request.resource.data.isTyping is bool);
        allow delete: if chatHasMember() && request.auth.uid == uid;
      }

   match /users/{userId}/chats/{chatId} {
  allow read, create, update, delete: if
    request.auth != null && request.auth.uid == userId &&
    (
      request.method == 'get' || request.method == 'list' ||              // Reads
      (
        request.resource.data is map &&                                   // Writes
        request.resource.data.keys().hasOnly(['lastReadAt','pinned','nickname','createdAt'])
      )
    );
}

      }
    }
  }
}
